name: Java CI with Gradle

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: /usr/bin/bash -e {0}
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Zulu_jdk/11.0.23-9/x64
        working-directory: ./gradlew

      - name: Build with Gradle
        run: ./gradlew build
        working-directory: /home/runner/work/DeployPractice/DeployPractice/./gradlew

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t spring-cicd .
          docker tag spring-cicd protox123/spring-cicd:${GITHUB_SHA::7}
          docker push protox123/spring-cicd:${GITHUB_SHA::7}
          
          
  #위 내용은 지속적 통합을 위한 스크립트입니다.
  #지속적 통합을 위한 스크립트 아래에 작성합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Start Session Manager session
        run: aws ssm start-session --target {인스턴스 id 값}
      - name: Deploy to Server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws ssm send-command \\
          --instance-ids {i-0f0e3bee724595a4b} \\
          --document-name "AWS-RunShellScript" \\
          --parameters "commands=[
            'if sudo docker ps -a --format \\\\'{{.Names}}\\\\' | grep -q \\'^server$\\\\'; then',
            '  sudo docker stop server',
            '  sudo docker rm server',
            'fi',
            'sudo docker pull {도커 유저네임}/spring-cicd:${GITHUB_SHA::7}',
            'sudo docker tag {도커 유저네임}/spring-cicd:${GITHUB_SHA::7} spring-cicd',
            'sudo docker run -d --name server -p 8080:8080 spring-cicd'
          ]" \\
          --output text